    private HashMap<String, HashSet<String>> followSets;
 
public HashMap<String, HashSet<String>> getFollowSets()
	{
		return followSets;
	}

// Creates the follow sets for the input file grammar
    public void createFollowSets()
    {
    	HashMap<String, HashSet<String>> result = new HashMap<String, HashSet<String>>();
    	String[] splitSpace, splitEquals;
    	int oldSize = 0, index = 0;
    	String nonTerm = "";
    	boolean isFirst = true, changes = true, hasEpsilon = false;
    	HashSet<String> currTerm, tempTerm = new HashSet<String>(), lastTerm;
		Set<String> addTerm = new HashSet<String>();
    	List<String> input = deconstructOr(origFile);
    	System.out.println(input);
    	
    	// Pull out non-terminals
    	for (String s : input)
    	{
    		splitSpace = s.split(" ");
    		nonTerm = splitSpace[0].trim();
    		if (result.containsKey(nonTerm))
    			continue;
    			
    		result.put(nonTerm, new HashSet<String>());
    		
    		if (isFirst)
    		{
    			result.get(nonTerm).add("$");
    			isFirst = false;
    		}
    	}
    	
    	// Compute the follow sets
    	int whileCount = 0, inputLine = 0;
    	while (changes)
    	{
    		inputLine = 0;
    		System.out.println("====================================");
    		System.out.println("While loop: " + whileCount);
    		changes = false;
    		lastTerm = new HashSet<String>();
    		// Iterate through production rules
    		for (String rule : input)
    		{
    			System.out.println("Input line: " + inputLine);
    			System.out.println("Input: " + rule);
    			splitEquals = rule.split("::=");
    			nonTerm = splitEquals[0];
    			currTerm = result.get(nonTerm.trim());
    			splitSpace = splitEquals[1].trim().split("( |>)");
    			
    			// Add in '>' brackets where needed
    			for (int i = 0; i < splitSpace.length; i++)
    			{
    				if (splitSpace[i].length() > 0 && splitSpace[i].charAt(0) == '<')
    				{
    					splitSpace[i] = splitSpace[i].trim() + ">";
    				}
					splitSpace[i] = splitSpace[i].trim();
    			}
    			
    			// For each non-terminal
    			int j = 0;
    			while (j < splitSpace.length)
    			{
    				String x = splitSpace[j];
    				String y = "";
    				if (x.length() <= 0)
    				{
    				}
    				else if (x.charAt(0) == '<' && j == splitSpace.length-1
    						&& !x.equals("<epsilon>"))
    				{
    					tempTerm = result.get(x);
						oldSize = tempTerm.size();
    					tempTerm = combineSet(tempTerm, currTerm);
    				}
    				else if (x.charAt(0) == '<' && !x.equals("<epsilon>"))
    				{
    					// x is a non-terminal
    					tempTerm = result.get(x);
						oldSize = tempTerm.size();
    					
    					// Search for next character
    					index = j+1;
    					while (index < splitSpace.length-1 && splitSpace[index].length() <= 0)
    						index++;
    					
    					y = splitSpace[index];
    					
    					// Check to see if y is terminal or not
    					if (y.charAt(0) == '<' && !y.equals("<epsilon>"))
    					{
    						addTerm = firstSets.get(y);
    						if (addTerm.contains("<epsilon>")) hasEpsilon = true;
    						addTerm.remove("<epsilon>");
    						
    						tempTerm = combineSet(tempTerm, addTerm);
    						
    						if (hasEpsilon)
    						{
        						addTerm.add("<epsilon>");
    							tempTerm = combineSet(tempTerm, currTerm);
    						}
    					}
    					else if (!y.equals("<epsilon>"))
    					{
    						tempTerm.add(y);
    					}
    					
    					if (oldSize < tempTerm.size())
    					{
    						changes = true;
    					}
    				}
    				
    				hasEpsilon = false;
    				j++;
    			}
    			System.out.println(result);
    			inputLine++;
    		}
    		
			System.out.println("======================================");

    		whileCount++;
    	}
    	followSets = result;
    	System.out.println("\n\n\nFollow Sets = " + followSets);
    }

// Gets rid of any | branching in the grammar by creating new production rules
    private List<String> deconstructOr(List<String> file)
    {
    	List<String> result = new LinkedList<String>();
    	String term = "", temp = "";
    	
    	for (String s : file)
    	{
    		String[] splitEquals = s.split("::=");
    		term = splitEquals[0];
    		String[] splitOr = splitEquals[1].split("\\|");
    		temp = term + " ::= ";
    		for (int i = 0; i < splitOr.length; i++)
    			result.add(temp + splitOr[i]);
    	}
    	
    	return result;
    }
